<?php

namespace App\Type;
use stdClass;
use DateTime;
use DateTimeInterface;

// This is a autogenerated file:BtcBlock

class BtcBlock {
    private ?string $hash; // json:hash Optional
    private ?int $height; // json:height Optional
    private ?string $chain; // json:chain Optional
    private ?int $total; // json:total Optional
    private ?int $fees; // json:fees Optional
    private ?int $size; // json:size Optional
    private ?int $vsize; // json:vsize Optional
    private ?int $ver; // json:ver Optional
    private DateTime $time; // json:time Optional
    private DateTime $receivedTime; // json:received_time Optional
    private ?string $relayedBy; // json:relayed_by Optional
    private ?int $bits; // json:bits Optional
    private ?int $nonce; // json:nonce Optional
    private ?int $nTx; // json:n_tx Optional
    private ?string $prevBlock; // json:prev_block Optional
    private ?string $mrklRoot; // json:mrkl_root Optional
    private ?array $txids; // json:txids Optional
    private ?int $depth; // json:depth Optional
    private ?string $prevBlockURL; // json:prev_block_url Optional
    private ?string $txURL; // json:tx_url Optional

    /**
     * @param string|null $hash
     * @param int|null $height
     * @param string|null $chain
     * @param int|null $total
     * @param int|null $fees
     * @param int|null $size
     * @param int|null $vsize
     * @param int|null $ver
     * @param DateTime $time
     * @param DateTime $receivedTime
     * @param string|null $relayedBy
     * @param int|null $bits
     * @param int|null $nonce
     * @param int|null $nTx
     * @param string|null $prevBlock
     * @param string|null $mrklRoot
     * @param array|null $txids
     * @param int|null $depth
     * @param string|null $prevBlockURL
     * @param string|null $txURL
     */
    public function __construct(?string $hash, ?int $height, ?string $chain, ?int $total, ?int $fees, ?int $size, ?int $vsize, ?int $ver, DateTime $time, DateTime $receivedTime, ?string $relayedBy, ?int $bits, ?int $nonce, ?int $nTx, ?string $prevBlock, ?string $mrklRoot, ?array $txids, ?int $depth, ?string $prevBlockURL, ?string $txURL) {
        $this->hash = $hash;
        $this->height = $height;
        $this->chain = $chain;
        $this->total = $total;
        $this->fees = $fees;
        $this->size = $size;
        $this->vsize = $vsize;
        $this->ver = $ver;
        $this->time = $time;
        $this->receivedTime = $receivedTime;
        $this->relayedBy = $relayedBy;
        $this->bits = $bits;
        $this->nonce = $nonce;
        $this->nTx = $nTx;
        $this->prevBlock = $prevBlock;
        $this->mrklRoot = $mrklRoot;
        $this->txids = $txids;
        $this->depth = $depth;
        $this->prevBlockURL = $prevBlockURL;
        $this->txURL = $txURL;
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromHash(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toHash(): ?string {
        if (BtcBlock::validateHash($this->hash))  {
            if (!is_null($this->hash)) {
                return $this->hash; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::hash');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateHash(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::hash");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getHash(): ?string {
        if (BtcBlock::validateHash($this->hash))  {
            return $this->hash;
        }
        throw new Exception('never get to getHash BtcBlock::hash');
    }

    /**
     * @return ?string
     */
    public static function sampleHash(): ?string {
        return 'BtcBlock::hash::31'; /*31:hash*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromHeight(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toHeight(): ?int {
        if (BtcBlock::validateHeight($this->height))  {
            if (!is_null($this->height)) {
                return $this->height; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::height');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateHeight(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::height");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getHeight(): ?int {
        if (BtcBlock::validateHeight($this->height))  {
            return $this->height;
        }
        throw new Exception('never get to getHeight BtcBlock::height');
    }

    /**
     * @return ?int
     */
    public static function sampleHeight(): ?int {
        return 32; /*32:height*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromChain(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toChain(): ?string {
        if (BtcBlock::validateChain($this->chain))  {
            if (!is_null($this->chain)) {
                return $this->chain; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::chain');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateChain(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::chain");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getChain(): ?string {
        if (BtcBlock::validateChain($this->chain))  {
            return $this->chain;
        }
        throw new Exception('never get to getChain BtcBlock::chain');
    }

    /**
     * @return ?string
     */
    public static function sampleChain(): ?string {
        return 'BtcBlock::chain::33'; /*33:chain*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromTotal(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toTotal(): ?int {
        if (BtcBlock::validateTotal($this->total))  {
            if (!is_null($this->total)) {
                return $this->total; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::total');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateTotal(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::total");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getTotal(): ?int {
        if (BtcBlock::validateTotal($this->total))  {
            return $this->total;
        }
        throw new Exception('never get to getTotal BtcBlock::total');
    }

    /**
     * @return ?int
     */
    public static function sampleTotal(): ?int {
        return 34; /*34:total*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromFees(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toFees(): ?int {
        if (BtcBlock::validateFees($this->fees))  {
            if (!is_null($this->fees)) {
                return $this->fees; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::fees');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateFees(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::fees");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getFees(): ?int {
        if (BtcBlock::validateFees($this->fees))  {
            return $this->fees;
        }
        throw new Exception('never get to getFees BtcBlock::fees');
    }

    /**
     * @return ?int
     */
    public static function sampleFees(): ?int {
        return 35; /*35:fees*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromSize(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toSize(): ?int {
        if (BtcBlock::validateSize($this->size))  {
            if (!is_null($this->size)) {
                return $this->size; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::size');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateSize(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::size");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getSize(): ?int {
        if (BtcBlock::validateSize($this->size))  {
            return $this->size;
        }
        throw new Exception('never get to getSize BtcBlock::size');
    }

    /**
     * @return ?int
     */
    public static function sampleSize(): ?int {
        return 36; /*36:size*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromVsize(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toVsize(): ?int {
        if (BtcBlock::validateVsize($this->vsize))  {
            if (!is_null($this->vsize)) {
                return $this->vsize; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::vsize');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateVsize(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::vsize");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getVsize(): ?int {
        if (BtcBlock::validateVsize($this->vsize))  {
            return $this->vsize;
        }
        throw new Exception('never get to getVsize BtcBlock::vsize');
    }

    /**
     * @return ?int
     */
    public static function sampleVsize(): ?int {
        return 37; /*37:vsize*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromVer(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toVer(): ?int {
        if (BtcBlock::validateVer($this->ver))  {
            if (!is_null($this->ver)) {
                return $this->ver; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::ver');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateVer(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::ver");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getVer(): ?int {
        if (BtcBlock::validateVer($this->ver))  {
            return $this->ver;
        }
        throw new Exception('never get to getVer BtcBlock::ver');
    }

    /**
     * @return ?int
     */
    public static function sampleVer(): ?int {
        return 38; /*38:ver*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return DateTime
     */
    public static function fromTime(?string $value): DateTime {
        if (!is_null($value)) {
            $tmp = DateTime::createFromFormat(DateTimeInterface::ISO8601, $value);
            if (!is_a($tmp, 'DateTime')) {
                throw new Exception('Attribute Error:BtcBlock::');
            }
            return $tmp;
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTime(): ?string {
        if (BtcBlock::validateTime($this->time))  {
            if (!is_null($this->time)) {
                return $this->time->format(DateTimeInterface::ISO8601);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::time');
    }

    /**
     * @param DateTime
     * @return bool
     * @throws Exception
     */
    public static function validateTime(DateTime $value): bool {
        if (!is_null($value)) {
            if (!is_a($value, 'DateTime')) {
                throw new Exception('Attribute Error:BtcBlock::time');
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return DateTime
     */
    public function getTime(): DateTime {
        if (BtcBlock::validateTime($this->time))  {
            return $this->time;
        }
        throw new Exception('never get to getTime BtcBlock::time');
    }

    /**
     * @return DateTime
     */
    public static function sampleTime(): DateTime {
        return DateTime::createFromFormat(DateTimeInterface::ISO8601, '2020-12-90T12:90:90+00:00');
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return DateTime
     */
    public static function fromReceivedTime(?string $value): DateTime {
        if (!is_null($value)) {
            $tmp = DateTime::createFromFormat(DateTimeInterface::ISO8601, $value);
            if (!is_a($tmp, 'DateTime')) {
                throw new Exception('Attribute Error:BtcBlock::');
            }
            return $tmp;
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toReceivedTime(): ?string {
        if (BtcBlock::validateReceivedTime($this->receivedTime))  {
            if (!is_null($this->receivedTime)) {
                return $this->receivedTime->format(DateTimeInterface::ISO8601);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::receivedTime');
    }

    /**
     * @param DateTime
     * @return bool
     * @throws Exception
     */
    public static function validateReceivedTime(DateTime $value): bool {
        if (!is_null($value)) {
            if (!is_a($value, 'DateTime')) {
                throw new Exception('Attribute Error:BtcBlock::receivedTime');
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return DateTime
     */
    public function getReceivedTime(): DateTime {
        if (BtcBlock::validateReceivedTime($this->receivedTime))  {
            return $this->receivedTime;
        }
        throw new Exception('never get to getReceivedTime BtcBlock::receivedTime');
    }

    /**
     * @return DateTime
     */
    public static function sampleReceivedTime(): DateTime {
        return DateTime::createFromFormat(DateTimeInterface::ISO8601, '2020-12-10T12:10:10+00:00');
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromRelayedBy(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toRelayedBy(): ?string {
        if (BtcBlock::validateRelayedBy($this->relayedBy))  {
            if (!is_null($this->relayedBy)) {
                return $this->relayedBy; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::relayedBy');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateRelayedBy(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::relayedBy");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getRelayedBy(): ?string {
        if (BtcBlock::validateRelayedBy($this->relayedBy))  {
            return $this->relayedBy;
        }
        throw new Exception('never get to getRelayedBy BtcBlock::relayedBy');
    }

    /**
     * @return ?string
     */
    public static function sampleRelayedBy(): ?string {
        return 'BtcBlock::relayedBy::41'; /*41:relayedBy*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromBits(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toBits(): ?int {
        if (BtcBlock::validateBits($this->bits))  {
            if (!is_null($this->bits)) {
                return $this->bits; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::bits');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateBits(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::bits");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getBits(): ?int {
        if (BtcBlock::validateBits($this->bits))  {
            return $this->bits;
        }
        throw new Exception('never get to getBits BtcBlock::bits');
    }

    /**
     * @return ?int
     */
    public static function sampleBits(): ?int {
        return 42; /*42:bits*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromNonce(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toNonce(): ?int {
        if (BtcBlock::validateNonce($this->nonce))  {
            if (!is_null($this->nonce)) {
                return $this->nonce; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::nonce');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateNonce(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::nonce");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getNonce(): ?int {
        if (BtcBlock::validateNonce($this->nonce))  {
            return $this->nonce;
        }
        throw new Exception('never get to getNonce BtcBlock::nonce');
    }

    /**
     * @return ?int
     */
    public static function sampleNonce(): ?int {
        return 43; /*43:nonce*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromNTx(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toNTx(): ?int {
        if (BtcBlock::validateNTx($this->nTx))  {
            if (!is_null($this->nTx)) {
                return $this->nTx; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::nTx');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateNTx(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::nTx");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getNTx(): ?int {
        if (BtcBlock::validateNTx($this->nTx))  {
            return $this->nTx;
        }
        throw new Exception('never get to getNTx BtcBlock::nTx');
    }

    /**
     * @return ?int
     */
    public static function sampleNTx(): ?int {
        return 44; /*44:nTx*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromPrevBlock(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toPrevBlock(): ?string {
        if (BtcBlock::validatePrevBlock($this->prevBlock))  {
            if (!is_null($this->prevBlock)) {
                return $this->prevBlock; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::prevBlock');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validatePrevBlock(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::prevBlock");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getPrevBlock(): ?string {
        if (BtcBlock::validatePrevBlock($this->prevBlock))  {
            return $this->prevBlock;
        }
        throw new Exception('never get to getPrevBlock BtcBlock::prevBlock');
    }

    /**
     * @return ?string
     */
    public static function samplePrevBlock(): ?string {
        return 'BtcBlock::prevBlock::45'; /*45:prevBlock*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromMrklRoot(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toMrklRoot(): ?string {
        if (BtcBlock::validateMrklRoot($this->mrklRoot))  {
            if (!is_null($this->mrklRoot)) {
                return $this->mrklRoot; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::mrklRoot');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateMrklRoot(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::mrklRoot");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getMrklRoot(): ?string {
        if (BtcBlock::validateMrklRoot($this->mrklRoot))  {
            return $this->mrklRoot;
        }
        throw new Exception('never get to getMrklRoot BtcBlock::mrklRoot');
    }

    /**
     * @return ?string
     */
    public static function sampleMrklRoot(): ?string {
        return 'BtcBlock::mrklRoot::46'; /*46:mrklRoot*/
    }

    /**
     * @param ?array $value
     * @throws Exception
     * @return ?array
     */
    public static function fromTxids(?array $value): ?array {
        if (!is_null($value)) {
            return  array_map(function ($value) {
                return $value; /*string*/
            }, $value);
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function toTxids(): ?array {
        if (BtcBlock::validateTxids($this->txids))  {
            if (!is_null($this->txids)) {
                return array_map(function ($value) {
                    return $value; /*string*/
                }, $this->txids);
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::txids');
    }

    /**
     * @param array|null
     * @return bool
     * @throws Exception
     */
    public static function validateTxids(?array $value): bool {
        if (!is_null($value)) {
            if (!is_array($value)) {
                throw new Exception("Attribute Error:BtcBlock::txids");
            }
            array_walk($value, function($value_v) {
                if (!is_string($value_v)) {
                    throw new Exception("Attribute Error:BtcBlock::txids");
                }
            });
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?array
     */
    public function getTxids(): ?array {
        if (BtcBlock::validateTxids($this->txids))  {
            return $this->txids;
        }
        throw new Exception('never get to getTxids BtcBlock::txids');
    }

    /**
     * @return ?array
     */
    public static function sampleTxids(): ?array {
        return  array(
            'BtcBlock::::47' /*47:*/
        ); /* 47:txids*/
    }

    /**
     * @param ?int $value
     * @throws Exception
     * @return ?int
     */
    public static function fromDepth(?int $value): ?int {
        if (!is_null($value)) {
            return $value; /*int*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function toDepth(): ?int {
        if (BtcBlock::validateDepth($this->depth))  {
            if (!is_null($this->depth)) {
                return $this->depth; /*int*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::depth');
    }

    /**
     * @param int|null
     * @return bool
     * @throws Exception
     */
    public static function validateDepth(?int $value): bool {
        if (!is_null($value)) {
            if (!is_integer($value)) {
                throw new Exception("Attribute Error:BtcBlock::depth");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?int
     */
    public function getDepth(): ?int {
        if (BtcBlock::validateDepth($this->depth))  {
            return $this->depth;
        }
        throw new Exception('never get to getDepth BtcBlock::depth');
    }

    /**
     * @return ?int
     */
    public static function sampleDepth(): ?int {
        return 48; /*48:depth*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromPrevBlockURL(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toPrevBlockURL(): ?string {
        if (BtcBlock::validatePrevBlockURL($this->prevBlockURL))  {
            if (!is_null($this->prevBlockURL)) {
                return $this->prevBlockURL; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::prevBlockURL');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validatePrevBlockURL(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::prevBlockURL");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getPrevBlockURL(): ?string {
        if (BtcBlock::validatePrevBlockURL($this->prevBlockURL))  {
            return $this->prevBlockURL;
        }
        throw new Exception('never get to getPrevBlockURL BtcBlock::prevBlockURL');
    }

    /**
     * @return ?string
     */
    public static function samplePrevBlockURL(): ?string {
        return 'BtcBlock::prevBlockURL::49'; /*49:prevBlockURL*/
    }

    /**
     * @param ?string $value
     * @throws Exception
     * @return ?string
     */
    public static function fromTxURL(?string $value): ?string {
        if (!is_null($value)) {
            return $value; /*string*/
        } else {
            return null;
        }
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function toTxURL(): ?string {
        if (BtcBlock::validateTxURL($this->txURL))  {
            if (!is_null($this->txURL)) {
                return $this->txURL; /*string*/
            } else {
                return  null;
            }
        }
        throw new Exception('never get to this BtcBlock::txURL');
    }

    /**
     * @param string|null
     * @return bool
     * @throws Exception
     */
    public static function validateTxURL(?string $value): bool {
        if (!is_null($value)) {
            if (!is_string($value)) {
                throw new Exception("Attribute Error:BtcBlock::txURL");
            }
        }
        return true;
    }

    /**
     * @throws Exception
     * @return ?string
     */
    public function getTxURL(): ?string {
        if (BtcBlock::validateTxURL($this->txURL))  {
            return $this->txURL;
        }
        throw new Exception('never get to getTxURL BtcBlock::txURL');
    }

    /**
     * @return ?string
     */
    public static function sampleTxURL(): ?string {
        return 'BtcBlock::txURL::50'; /*50:txURL*/
    }

    /**
     * @throws Exception
     * @return bool
     */
    public function validate(): bool {
        return BtcBlock::validateHash($this->hash)
        || BtcBlock::validateHeight($this->height)
        || BtcBlock::validateChain($this->chain)
        || BtcBlock::validateTotal($this->total)
        || BtcBlock::validateFees($this->fees)
        || BtcBlock::validateSize($this->size)
        || BtcBlock::validateVsize($this->vsize)
        || BtcBlock::validateVer($this->ver)
        || BtcBlock::validateTime($this->time)
        || BtcBlock::validateReceivedTime($this->receivedTime)
        || BtcBlock::validateRelayedBy($this->relayedBy)
        || BtcBlock::validateBits($this->bits)
        || BtcBlock::validateNonce($this->nonce)
        || BtcBlock::validateNTx($this->nTx)
        || BtcBlock::validatePrevBlock($this->prevBlock)
        || BtcBlock::validateMrklRoot($this->mrklRoot)
        || BtcBlock::validateTxids($this->txids)
        || BtcBlock::validateDepth($this->depth)
        || BtcBlock::validatePrevBlockURL($this->prevBlockURL)
        || BtcBlock::validateTxURL($this->txURL);
    }

    /**
     * @return stdClass
     * @throws Exception
     */
    public function to(): stdClass  {
        $out = new stdClass();
        $out->{'hash'} = $this->toHash();
        $out->{'height'} = $this->toHeight();
        $out->{'chain'} = $this->toChain();
        $out->{'total'} = $this->toTotal();
        $out->{'fees'} = $this->toFees();
        $out->{'size'} = $this->toSize();
        $out->{'vsize'} = $this->toVsize();
        $out->{'ver'} = $this->toVer();
        $out->{'time'} = $this->toTime();
        $out->{'received_time'} = $this->toReceivedTime();
        $out->{'relayed_by'} = $this->toRelayedBy();
        $out->{'bits'} = $this->toBits();
        $out->{'nonce'} = $this->toNonce();
        $out->{'n_tx'} = $this->toNTx();
        $out->{'prev_block'} = $this->toPrevBlock();
        $out->{'mrkl_root'} = $this->toMrklRoot();
        $out->{'txids'} = $this->toTxids();
        $out->{'depth'} = $this->toDepth();
        $out->{'prev_block_url'} = $this->toPrevBlockURL();
        $out->{'tx_url'} = $this->toTxURL();
        return $out;
    }

    /**
     * @param stdClass $obj
     * @return BtcBlock
     * @throws Exception
     */
    public static function from(stdClass $obj): BtcBlock {
        return new BtcBlock(
         BtcBlock::fromHash($obj->{'hash'})
        ,BtcBlock::fromHeight($obj->{'height'})
        ,BtcBlock::fromChain($obj->{'chain'})
        ,BtcBlock::fromTotal($obj->{'total'})
        ,BtcBlock::fromFees($obj->{'fees'})
        ,BtcBlock::fromSize($obj->{'size'})
        ,BtcBlock::fromVsize($obj->{'vsize'})
        ,BtcBlock::fromVer($obj->{'ver'})
        ,BtcBlock::fromTime($obj->{'time'})
        ,BtcBlock::fromReceivedTime($obj->{'received_time'})
        ,BtcBlock::fromRelayedBy($obj->{'relayed_by'})
        ,BtcBlock::fromBits($obj->{'bits'})
        ,BtcBlock::fromNonce($obj->{'nonce'})
        ,BtcBlock::fromNTx($obj->{'n_tx'})
        ,BtcBlock::fromPrevBlock($obj->{'prev_block'})
        ,BtcBlock::fromMrklRoot($obj->{'mrkl_root'})
        ,BtcBlock::fromTxids($obj->{'txids'})
        ,BtcBlock::fromDepth($obj->{'depth'})
        ,BtcBlock::fromPrevBlockURL($obj->{'prev_block_url'})
        ,BtcBlock::fromTxURL($obj->{'tx_url'})
        );
    }

    /**
     * @return BtcBlock
     */
    public static function sample(): BtcBlock {
        return new BtcBlock(
         BtcBlock::sampleHash()
        ,BtcBlock::sampleHeight()
        ,BtcBlock::sampleChain()
        ,BtcBlock::sampleTotal()
        ,BtcBlock::sampleFees()
        ,BtcBlock::sampleSize()
        ,BtcBlock::sampleVsize()
        ,BtcBlock::sampleVer()
        ,BtcBlock::sampleTime()
        ,BtcBlock::sampleReceivedTime()
        ,BtcBlock::sampleRelayedBy()
        ,BtcBlock::sampleBits()
        ,BtcBlock::sampleNonce()
        ,BtcBlock::sampleNTx()
        ,BtcBlock::samplePrevBlock()
        ,BtcBlock::sampleMrklRoot()
        ,BtcBlock::sampleTxids()
        ,BtcBlock::sampleDepth()
        ,BtcBlock::samplePrevBlockURL()
        ,BtcBlock::sampleTxURL()
        );
    }
}
